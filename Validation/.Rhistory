theta
p
warnings()
g <- 2
debug(survSim)
c
sim
g
Q
debug(survSim)
c
sim
c
sim
sim
d
names(d)
Q
d
getwd()
d
 C <- rexp(10, 0.1)
 CC <- rexp(10, 0.1)
C
debug(survSim)
c
c
C
sim
 pmin(c(sim), C)
sim
Q
d
debug(getDeaths)
d
index
Q
debug(adjCensored)
index
d
Q
debug(adjCensored)
index
Q
undebug(adjCensored)
debug(getDeaths)
index
d
print(c)
Q
index
n
print(n)
print(c)
index
d
i <- 1
Q
img$survData
debug(getDeaths)
index
index
print(n)
Q
debug(getDeaths)
censies
print(n)
dead
d$deaths
censies
dead
print(n)
print(n)
d$deaths
censies
print(n)
dead
print(n)
Q
undebug(getDeaths)
img$survData
debug(getDeaths)
index
d
Q
img$survData
debug(getDeaths)
Q
img$survData
debug(getDeaths)
j
i
j
j
j
j
j
j
i
index[i]
index[i + 1]
d
print(n)
j
censies
d$status[prev:j]
prev
dead
dead
print(n)
d
Q
i <- 1
if(i == 1) prev <- 0 else prev <- index[i]
prev
i <- 4
if(i == 1) prev <- 0 else prev <- index[i]
debug(getDeaths)
j
j
j
j
prev
0
d
d$status[prev:j]
index[i]
prev
min(prev,index[i] + 1)
max(prev,index[i] + 1)
i
index
dead
j
d
index
index[i]+1
index[i]
Q
debug(getDeaths)
j
j
j
j
j
j
j
censies
print(n)
dead
prev
Q
img$survData
debug(getDeaths)
c
clr
RGB
index
d
Q
img$survData
debug(getDeaths)
c
RGB
d
j
j
j
j
j
i
censies
print(n)
i
i == nrow(c)
i
nrow(c)
length(index)
i == nrow(c)
index[i] == index[i + 1]
if(T | F) 2
if(F | F) 2
Q
debug(getDeaths
)
c
debug(getDeaths)
c
j
j
print(n)
censies
dead
d$deaths[j]
i
index
index[i+1]
index[i]
censies
d
prev
dead
print(n)
n <- 1
dead
censies
d$survProb[j]
d$survProb[prev]
d$deaths
d$deaths
index
d
index[i] + 1
d
index
Q
img$survData
debug(spectrum)
c
image(spectr)
Q
undebug(spectrum)
debug(detectCensoring)
image(spectr)
image(imgV)
str(spectr)
colSums(spectr)
rowSums(spectr)
spectr[rowSums(spectr) < 0,] 
spectr[rowSums(spectr) < 0,] <- mean(rowMeans(spectr))
rowSums(spectr)
mean(rowMeans(spectr))
rowMeans(spectr)
Q
Q
spectr <- rep(0,10)
h = 10
lineWidth = 3
spectr
spectr[round((h - lineWidth)/2) : round((h - lineWidth)/2 + lineWidth)] <- 1
spectr
spectr <- rep(0,10)
lineWidth = 4
spectr[round((h - lineWidth)/2) : round((h - lineWidth)/2 + lineWidth)] <- 1
spectr
spectr <- rep(0,10)
spectr[ceiling((h - lineWidth)/2) : ceiling((h - lineWidth)/2 + lineWidth)]
spectr[ceiling((h - lineWidth)/2) : ceiling((h - lineWidth)/2 + lineWidth)] <- 1
spectr
spectr <- rep(0,10)
spectr[ceiling((h - lineWidth)/2) : floor((h - lineWidth)/2 + lineWidth)] <- 1
spectr
spectr <- rep(0,10)
spectr[floor((h - lineWidth)/2) : floor((h - lineWidth)/2 + lineWidth)] <- 1
spectr
spectr[floor((h - lineWidth)/2 + 1) : floor((h - lineWidth)/2 + lineWidth)] <- 1
spectr
spectr <- rep(0,10)
spectr[floor((h - lineWidth)/2 + 1) : floor((h - lineWidth)/2 + lineWidth)] <- 1
spectr
lineWidth = 3
spectr <- rep(0,10)
spectr[floor((h - lineWidth)/2 + 1) : floor((h - lineWidth)/2 + lineWidth)] <- 1
spectr
debug(detectCensoring)
image(spectr)
Q
debug(detectCensoring)
image(spectr)
Q
debug(detectCensoring)
image(spectr)
Q
debug(detectCensoring)
image(spectr)
Q
Q
undebug(detectCensoring)
img$survData
debug(detectCensoring)
image(spectr)
image(imgV)
Q
load("Preventza.RData")
0
5
50
100
0* "asas"
input <- 24
length(input)
p <- c("y1", "y2", "x1", "x2")
"y1" %in% c("y1", "y2")
"x1" %in% c("y1", "y2")
img <- survThief("Benrashid original.jpg", atRisk,
img <- survThief("Benrashid original.jpg", atRisk)
img <- survThief("Benrashid original.jpg", atRisk)
0
23
yxyx
 input <- readline(paste("What is the return of", 
                                p, "?\n", "in %"))
asas
qplot(x=1, fill=I(rgb(0.1, 0.8, 0.5)))
?list.files
?dir
"imager" %in% (.packages())
0
25
0
100
0
40
0
100
0
25
0
100
0
25
0
100
w
s
n
str(atRisk)
atRisk[[1]]
atRisk[[1]][[1]]
str(atRisk)
str(atRisk)
str(atRisk)
str(IPD)
a <- list(list())
a
a[[1]]
a[[1]][[1]]
a <- list(list(0))
a[[1]][[1]]
a
str(atRisk)
rep( list(list()), 3 ) 
names(atRisk)
atRisk[[1]]
atRisk[["small"]]
traceback()
traceback()
debug(walk)
image(line)
display(line)
display(line)
Q
quantize(load.image(paste0("plots/", n, ".png")))
paste0("plots/", n, ".png")
quantize(paste0("plots/", n, ".png"))
image(quantize(paste0("plots/", n, ".png")))
display(quantize(paste0("plots/", n, ".png")))
?HSVtoRGB
install.packages("colormod")
install.packages("colorspace")
Q
undebug(walk)
traceback()
n
