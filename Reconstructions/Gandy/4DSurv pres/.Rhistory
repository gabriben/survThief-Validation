make.tabs(functions),
sep = "",
file = "survThiefFunctions.Rmd")
f <- eval(parse(text=paste0('survThief:::', j)))
str(f)
f
as.character(f)
as.null(f)
f
str(f)
f
f[1]
body(f)
make.tabs <- function(functions){
res <- NULL
for(i in functions){
f <- eval(parse(text=paste0('survThief:::', i)))
res <- c(res, '### ', i, ' {-}', '\n',
"```{r, echo = T, eval=FALSE}", '\n',
body(f), '\n',
'```', '\n\n')
}
return(res)
}
# Create the Rmd to knit
cat(
'
## Functions in survThief {.tabset .tabset-pills}
',
make.tabs(functions),
sep = "",
file = "survThiefFunctions.Rmd")
make.tabs <- function(functions){
res <- NULL
for(i in functions){
f <- eval(parse(text=paste0('survThief:::', i)))
res <- c(res, '### ', i, ' {-}', '\n',
"```{r, echo = T, eval=FALSE}", '\n',
"body(f)", '\n',
'```', '\n\n')
}
return(res)
}
# Create the Rmd to knit
cat(
'
## Functions in survThief {.tabset .tabset-pills}
',
make.tabs(functions),
sep = "",
file = "survThiefFunctions.Rmd")
str(body(f))
type(body(f))
class(body(f))
method(body(f))
as.character(body(f))
make.tabs <- function(functions){
res <- NULL
for(i in functions){
f <- eval(parse(text=paste0('survThief:::', i)))
res <- c(res, '### ', i, ' {-}', '\n',
"```{r, echo = T, eval=FALSE}", '\n',
as.character(body(f)), '\n',
'```', '\n\n')
}
return(res)
}
# Create the Rmd to knit
cat(
'
## Functions in survThief {.tabset .tabset-pills}
',
make.tabs(functions),
sep = "",
file = "survThiefFunctions.Rmd")
formals(f)
f
f[[1]]
args(f)
args(f)
str(args(f))
make.tabs <- function(functions){
res <- NULL
for(i in functions){
f <- eval(parse(text=paste0('survThief:::', i)))
res <- c(res, '### ', i, ' {-}', '\n',
"```{r, echo = T, eval=FALSE}", '\n',
args(f), as.character(body(f)), '\n',
'```', '\n\n')
}
return(res)
}
# Create the Rmd to knit
cat(
'
## Functions in survThief {.tabset .tabset-pills}
',
make.tabs(functions),
sep = "",
file = "survThiefFunctions.Rmd")
make.tabs <- function(functions){
res <- NULL
for(i in functions){
f <- eval(parse(text=paste0('survThief:::', i)))
res <- c(res, '### ', i, ' {-}', '\n',
"```{r, echo = T, eval=FALSE}", '\n',
as.character(args(f)), as.character(body(f)), '\n',
'```', '\n\n')
}
return(res)
}
# Create the Rmd to knit
cat(
'
## Functions in survThief {.tabset .tabset-pills}
',
make.tabs(functions),
sep = "",
file = "survThiefFunctions.Rmd")
args(f)
args(f)[1]
body(args(f))
function(f)
alist(f)
formalArgs(f)
args(f)
substr(args(f), 3)
args(args(f))
body(args(f))
args(f)
print(args(f))
f
setwd("/Users/gabrielbenedict/Google_Drive/docs/UNIS/KU Leuven/Courses/Master Thesis/Digitize Survival Curves in sections/Code/survThief/R/")
functions <- list.files(pattern = ".R")
functions
read.file(functions[1])
source(functions[1])
stitch(functions[1])
print(source(functions[1]))
source(functions[1])$value
make.tabs <- function(functions){
res <- NULL
for(i in functions){
f <- eval(parse(text=paste0('survThief:::', i)))
res <- c(res, '### ', i, ' {-}', '\n',
"```{r, echo = T, eval=FALSE}", '\n',
source(functions[i])$value, '\n',
'```', '\n\n')
}
return(res)
}
# Create the Rmd to knit
cat(
'
## Functions in survThief {.tabset .tabset-pills}
',
make.tabs(functions),
sep = "",
file = "survThiefFunctions.Rmd")
functions <- list.files(pattern = ".R")
make.tabs <- function(functions){
res <- NULL
for(i in functions){
f <- eval(parse(text=paste0('survThief:::', i)))
res <- c(res, '### ', i, ' {-}', '\n',
"```{r, echo = T, eval=FALSE}", '\n',
source(functions[i])$value, '\n',
'```', '\n\n')
}
return(res)
}
# Create the Rmd to knit
cat(
'
## Functions in survThief {.tabset .tabset-pills}
',
make.tabs(functions),
sep = "",
file = "survThiefFunctions.Rmd")
function[1]
functions[1]
make.tabs <- function(functions){
res <- NULL
for(i in functions){
res <- c(res, '### ', i, ' {-}', '\n',
"```{r, echo = T, eval=FALSE}", '\n',
source(functions[i])$value, '\n',
'```', '\n\n')
}
return(res)
}
# Create the Rmd to knit
cat(
'
## Functions in survThief {.tabset .tabset-pills}
',
make.tabs(functions),
sep = "",
file = "survThiefFunctions.Rmd")
make.tabs <- function(functions){
res <- NULL
for(i in functions){
res <- c(res, '### ', i, ' {-}', '\n',
"```{r, echo = T, eval=FALSE}", '\n',
source(file = functions[i])$value, '\n',
'```', '\n\n')
}
return(res)
}
# Create the Rmd to knit
cat(
'
## Functions in survThief {.tabset .tabset-pills}
',
make.tabs(functions),
sep = "",
file = "survThiefFunctions.Rmd")
make.tabs <- function(functions){
res <- NULL
for(i in functions){
res <- c(res, '### ', i, ' {-}', '\n',
"```{r, echo = T, eval=FALSE}", '\n',
source(i)$value, '\n',
'```', '\n\n')
}
return(res)
}
# Create the Rmd to knit
cat(
'
## Functions in survThief {.tabset .tabset-pills}
',
make.tabs(functions),
sep = "",
file = "survThiefFunctions.Rmd")
make.tabs <- function(functions){
res <- NULL
for(i in functions){
res <- c(res, '### ', i, ' {-}', '\n',
"```{r, echo = T, eval=FALSE}", '\n',
as.character(source(i)$value), '\n',
'```', '\n\n')
}
return(res)
}
# Create the Rmd to knit
cat(
'
## Functions in survThief {.tabset .tabset-pills}
',
make.tabs(functions),
sep = "",
file = "survThiefFunctions.Rmd")
make.tabs <- function(functions){
res <- NULL
for(i in functions){
res <- c(res, '### ', i, ' {-}', '\n',
"```{r, echo = T, eval=FALSE}", '\n',
body(source(i)$value), '\n',
'```', '\n\n')
}
return(res)
}
# Create the Rmd to knit
cat(
'
## Functions in survThief {.tabset .tabset-pills}
',
make.tabs(functions),
sep = "",
file = "survThiefFunctions.Rmd")
source(i)$value
str(source(function[i])$value)
str(source(functions[i])$value)
str(source(functions[1])$value)
source(functions[1])$value
str(source(functions[1])$value)
dput(source(functions[1]))
cat(capture.output(print(source(functions[1]))), sep="\n")
cat(capture.output(print(source(functions[1])$value)), sep="\n")
make.tabs <- function(functions){
res <- NULL
for(i in functions){
res <- c(res, '### ', i, ' {-}', '\n',
"```{r, echo = T, eval=FALSE}", '\n',
cat(capture.output(print(source(i)$value)), sep="\n"), '\n',
'```', '\n\n')
}
return(res)
}
# Create the Rmd to knit
cat(
'
## Functions in survThief {.tabset .tabset-pills}
',
make.tabs(functions),
sep = "",
file = "survThiefFunctions.Rmd")
capture.output(print(source(functions[1])$value))
make.tabs <- function(functions){
res <- NULL
for(i in functions){
res <- c(res, '### ', i, ' {-}', '\n',
"```{r, echo = T, eval=FALSE}", '\n',
paste0(capture.output(print(source(i)$value)), sep="\n"), '\n',
'```', '\n\n')
}
return(res)
}
# Create the Rmd to knit
cat(
'
## Functions in survThief {.tabset .tabset-pills}
',
make.tabs(functions),
sep = "",
file = "survThiefFunctions.Rmd")
paste0(capture.output(print(source(functions[1])$value)), sep="\n")
make.tabs <- function(functions){
res <- NULL
for(i in functions){
res <- c(res, '### ', i, ' {-}', '\n',
"```{r, echo = T, eval=FALSE}", '\n',
as.character(paste0(capture.output(print(source(i)$value)), sep="\n")), '\n',
'```', '\n\n')
}
return(res)
}
# Create the Rmd to knit
cat(
'
## Functions in survThief {.tabset .tabset-pills}
',
make.tabs(functions),
sep = "",
file = "survThiefFunctions.Rmd")
as.character(paste0(capture.output(print(source(functions[1])$value)), sep="\n"))
unlist(paste0(capture.output(print(source(functions[1])$value)), sep="\n"))
paste(paste0(capture.output(print(source(functions[1])$value)), sep="\n"), collapse = ", ")
make.tabs <- function(functions){
res <- NULL
for(i in functions){
res <- c(res, '### ', i, ' {-}', '\n',
"```{r, echo = T, eval=FALSE}", '\n',
paste(paste0(capture.output(print(source(functions[1])$value)), sep="\n"), collapse = ", "), '\n',
'```', '\n\n')
}
return(res)
}
# Create the Rmd to knit
cat(
'
## Functions in survThief {.tabset .tabset-pills}
',
make.tabs(functions),
sep = "",
file = "survThiefFunctions.Rmd")
library(survThief)
functions <- lsf.str("package:survThief")
# for (i in functions) print(eval(parse(text=paste0("survThief:::", i))))
setwd("/Users/gabrielbenedict/Google_Drive/docs/UNIS/KU Leuven/Courses/Master Thesis/March Presentation")
# Function to create multiple tabs
make.tabs <- function(functions){
res <- NULL
for(i in functions){
res <- c(res, '### ', i, ' {-}', '\n',
"```{r, comment=NA}", '\n',
"eval(parse(text=paste0('survThief:::', '", i, "')))", '\n',
'```', '\n\n')
}
return(res)
}
# Create the Rmd to knit
cat(
'
## Functions in survThief {.tabset .tabset-pills}
',
make.tabs(functions),
sep = "",
file = "survThiefFunctions.Rmd")
knitr::opts_chunk$set(message = F, fig.align = "center")
library(epuRate)
library(rmarkdown)
library(knitr)
library(dplyr)
library(DT)
library(survival)
library(survminer)
f <- survfit(Surv(time, status) ~ x, data = leukemia)
ggsurvplot(f)
datatable(leukemia, rownames = F,
options = list(
pageLength = nrow(leukemia),
scrollY = "400px", dom = 't'
)
)
library(EBImage)
p <- "../Reconstructions/reproducing survival meta analysis/Reconstructed/Benrashid/Benrashid original.jpg"
img <- readImage(p)
display(img, method="browser")
load("dfSegmented.rds")
library(plotly)
dfSmall <- df[sample(1:nrow(df), 10000),]
# original
library(shiny)
div(plot_ly(dfSmall, size = 0.1, x = ~red, y = ~green, z = ~blue,
marker = list(color = ~rgb(dfSmall$red, dfSmall$green, dfSmall$blue),
line = list(width = 0))) %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'R'),
yaxis = list(title = 'G'),
zaxis = list(title = 'B'))) %>%
layout(paper_bgcolor='rgb(254, 247, 234)'), align = "center")
# segmented
div(plot_ly(dfSmall, size = 0.1, x = ~red, y = ~green, z = ~blue,
marker = list(color = ~rgb(dfSmall$R, dfSmall$G, dfSmall$B),
line = list(width = 0))) %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'R'),
yaxis = list(title = 'G'),
zaxis = list(title = 'B'))) %>%
layout(paper_bgcolor='rgb(254, 247, 234)'), align = "center")
load("sc.rds")
div(plot_ly(data.frame(s), size = 0.1, x = ~X1, y = ~X2, z = ~X3,
marker = list(color = ~rgb(sc@centers[sc@.Data, 1],
sc@centers[sc@.Data, 2],
sc@centers[sc@.Data, 3]),
line = list(width = 0))) %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'R'),
yaxis = list(title = 'G'),
zaxis = list(title = 'B'))) %>%
layout(paper_bgcolor='rgb(254, 247, 234)'), align = "center")
load("dbscan.rds")
div(plot_ly(data.frame(s), size = 0.1, x = ~red, y = ~green, z = ~blue,
marker = list(color = ~rgb(s$centerRed, s$centerGreen, s$centerBlue),
line = list(width = 0))) %>%
# color = K$cluster) %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'R'),
yaxis = list(title = 'G'),
zaxis = list(title = 'B'))) %>%
layout(paper_bgcolor='rgb(254, 247, 234)'), align = "center")
library(plotwidgets)
fundCols <- hsl2rgb(t(cbind(seq(360*1/12, 360*11/12, 360*2/12), 0.5, 0.5)))
background <- hsl2rgb(t(cbind(seq(1, 360), 0.5, 0.5)))
library(ggplot2)
ggplot() + geom_rect(aes(xmin=0:359, xmax=1:360, ymin=-1, ymax=0),
fill = rgb(t(background), maxColorValue = 255)) +
geom_rect(aes(xmin=seq(0, 300, 60), xmax=seq(60, 360, 60), ymin=0, ymax=1),
fill = rgb(t(fundCols), maxColorValue = 255)) +
theme_void()
magick::magick_config() %>% unlist %>% subset(. == T) %>% names
library(mvbutils)
library(survThief)
foodweb(where="package:survThief",
boxcolor = "#FC6512", textcolor = "black",
cex = 0.7, lwd=2)
p <- "../Reconstructions/reproducing survival meta analysis/Reconstructed"
myimages <- list.files(p, pattern = "original", full.names = TRUE, recursive = T)
library(knitr)
include_graphics(myimages)
p <- "../Reconstructions/reproducing survival meta analysis/Not Yet"
myimages <- list.files(p, pattern = "original", full.names = TRUE, recursive = T)
library(knitr)
include_graphics(myimages)
load("../Reconstructions/reproducing survival meta analysis/meta.RData")
colnames(d)[1] <- "time in months"
datatable(cbind(format(round(d[1], 4)), d[-1]),
editable = TRUE,rownames = F,
options = list(
pageLength = nrow(d),
scrollY = "400px", dom = 't'
)
)
## KM
colnames(d)[1] <- "time"
library(survival)
fit <- survfit(Surv(time, status) ~ stratum, data=d)
library(survminer)
## pdf("results/detectCensoring V2.pdf",width=14,height=10)
KMPlot <- ggsurvplot(fit, risk.table = T, tables.theme = theme_cleantable(),
risk.table.col = "strata", RUEpval = TRUE,
ggtheme = theme_bw(), risk.table.y.text=F,
break.time.by=12)
KMPlot
load("weibFit.rds")
KMPlot$plot + geom_line(data = stanWeibFitSurvMean,
mapping = aes(x = t,y = survival_mean, group = treatment, color = treatment)) +
geom_line(data = stanWeibFitSurvMean,
mapping = aes(x = t,y = survival_95upper, group = treatment, color = treatment), linetype = "dotted") +
geom_line(data = stanWeibFitSurvMean,
mapping = aes(x = t,y = survival_95lower, group = treatment, color = treatment), linetype = "dotted")
library(DPWeibull)
library(DPWeibull)
library(fastDummies)
y <- as.matrix(d[1:2])
x <- as.matrix(cbind(1*(d$stratum == "open"),
dummy_cols(d$study, remove_first_dummy = T)[-1]))
weibModelCovs <- dpweib(y ~ x)
weibModelCovs$predtime
weibModelCovs$delta
weibModelCovs$S
weibModelCovs$alpharec
weibModelCovs$alpharec[1]
str(weibModelCovs$alpharec)
getwd()
save(weibModelCovs, file = "../Reconstructions/reproducing survival meta analysis/DDP.RData")
library(EBImage)
p <- "../Reconstructions/reproducing survival meta analysis/Reconstructed/Benrashid/Benrashid original.jpg"
img <- readImage(p)
display(img, method="browser")
